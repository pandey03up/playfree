{"version":3,"sources":["Store/reducer.js","Links/Links.js","YouTube/YouTube.js","App.js","serviceWorker.js","index.js"],"names":["playList","list","value","reducer","List","action","type","includes","replace","Links","id","placeholder","this","props","Value","onInput","event","insertVideo","target","className","onClick","addVideo","map","video","index","key","Component","connect","state","dispatch","term","Streaming","useState","setIndex","YouTube","videoId","opts","height","width","playerVars","autoplay","onReady","playVideo","onEnd","Boolean","window","location","hostname","match","store","createStore","Reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAAMA,EAAW,CACbC,KAAO,GACPC,MAAQ,IAmBGC,EAhBC,WAA4B,IAA3BC,EAA0B,uDAAnBJ,EAASK,EAAU,uCACvC,MAAmB,WAAhBA,EAAOC,KACN,eACOF,EADP,CAEIF,MAAQG,EAAOH,QAGJ,YAAhBG,EAAOC,MAAqC,KAAfF,EAAKF,OAAgBE,EAAKF,MAAMK,SAAS,oCACrE,eACOH,EADP,CAEIH,KAAI,sBAAOG,EAAKH,MAAZ,CAAiBG,EAAKF,MAAMM,QAAQ,mCAAmC,QAG5EJ,G,uDCdLK,G,uLACO,IAAD,OACJ,OACI,6BACI,yBAAKC,GAAK,cACL,2BAAOA,GAAK,QAAQC,YAAc,iBAC3BT,MAASU,KAAKC,MAAMC,MACpBC,QAAW,SAACC,GAAD,OAAW,EAAKH,MAAMI,YAAYD,EAAME,OAAOhB,UACjE,4BAAQiB,UAAY,SAASC,QAAWR,KAAKC,MAAMQ,UAAnD,QAEL,6BACI,wCACA,yBAAKX,GAAK,QAEFE,KAAKC,MAAMT,KAAKkB,KAAI,SAACC,EAAMC,GACvB,OACI,yBAAKC,IAAOD,EAAOL,UAAU,WACzB,8BAAOK,EAAM,EAAb,KAAuB,uCAAaA,EAAM,c,GAjB9DE,cA2CLC,eAbK,SAAAC,GAChB,MAAM,CACFxB,KAAOwB,EAAM3B,KACba,MAAQc,EAAM1B,UAGD,SAAA2B,GACjB,MAAM,CACFZ,YAAc,SAACa,GAAD,OAAUD,EAAS,CAACvB,KAAO,SAASJ,MAAO4B,KACzDT,SAAW,kBAAMQ,EAAS,CAACvB,KAAK,gBAIzBqB,CAAkClB,G,gBCdlCsB,MA9Bf,SAAmBlB,GAAQ,IAAD,EAECmB,mBAAS,GAFV,mBAEjBR,EAFiB,KAEXS,EAFW,KAmBlB,OACI,6BACI,kBAACC,EAAA,EAAD,CAASC,QAAWtB,EAAMH,GAAGc,GACzBY,KAXC,CACTC,OAAQ,MACRC,MAAO,MACPC,WAAY,CACVC,SAAU,IAQJC,QAnBhB,SAAkBzB,GAEhBA,EAAME,OAAOwB,aAkBCC,MAhBhB,SAAkB3B,GAChBiB,EAAST,EAAM,Q,MCOrB,IAMeG,eANK,SAAAC,GAClB,MAAM,CACFxB,KAAOwB,EAAM3B,QAIJ0B,EAnBf,SAAad,GACX,OACE,6BACE,yBAAKH,GAAK,aACR,kBAAC,EAAD,CAAWA,GAAMG,EAAMT,QAEzB,yBAAKM,GAAK,SACR,kBAAC,EAAD,WCDYkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYC,GAE1BC,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAASA,GAAO,kBAAC,EAAD,OAAoBK,SAASC,eAAe,SDwHhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c4f3018.chunk.js","sourcesContent":["const playList = {\r\n    list : [],\r\n    value : \"\"\r\n}\r\n\r\nconst reducer = (List = playList,action) =>{\r\n    if(action.type === 'INSERT'){\r\n        return{\r\n            ...List,\r\n            value : action.value\r\n        }\r\n    }\r\n    if(action.type === 'EXECUTE' && List.value !== \"\" && List.value.includes(\"https://www.youtube.com/watch?v=\")){\r\n        return{\r\n            ...List,\r\n            list : [...List.list,List.value.replace(\"https://www.youtube.com/watch?v=\",\"\")]\r\n        }\r\n    }\r\n    return List;\r\n}\r\n\r\nexport default reducer;","import React ,{Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport './Links.css'\r\n\r\nclass Links extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div id = 'InputField'>\r\n                     <input id = 'Input' placeholder = 'Enter The Link' \r\n                            value = {this.props.Value} \r\n                            onInput = {(event) => this.props.insertVideo(event.target.value)}></input>\r\n                     <button className = 'Button' onClick = {this.props.addVideo}>ADD</button>\r\n                </div>\r\n                <div>\r\n                    <h4>Playlist</h4>\r\n                    <div id = \"List\">\r\n                        {\r\n                            this.props.List.map((video,index) =>{\r\n                                return(\r\n                                    <div key = {index} className='videoId'>\r\n                                        <span>{index+1}.</span><span>Video {index+1}</span>\r\n                                        \r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapPlayList = state =>{\r\n    return{\r\n        List : state.list,\r\n        Value : state.value\r\n    }\r\n}\r\nconst dispatchList = dispatch =>{\r\n    return{\r\n        insertVideo : (term) => dispatch({type : 'INSERT',value: term}),\r\n        addVideo : () => dispatch({type:'EXECUTE'}),\r\n    }\r\n}\r\n\r\nexport default connect(mapPlayList,dispatchList)(Links)","import React ,{useState} from 'react'\r\nimport YouTube from 'react-youtube';\r\n\r\nfunction Streaming(props) {\r\n    \r\n  const [index,setIndex] = useState(0)\r\n\r\n    function _onReady(event) {\r\n      // access to player in all event handlers via event.target\r\n      event.target.playVideo();\r\n    }\r\n    function afterEnd(event){\r\n      setIndex(index+1)\r\n    }\r\n        const opts = {\r\n            height: '500',\r\n            width: '80%',\r\n            playerVars: { // https://developers.google.com/youtube/player_parameters\r\n              autoplay: 1\r\n            }\r\n          };\r\n\r\n        return(\r\n            <div>\r\n                <YouTube videoId = {props.id[index]}\r\n                    opts={opts}\r\n                    onReady={_onReady} \r\n                    onEnd = {afterEnd}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Streaming","import React from 'react';\nimport {connect} from 'react-redux'\nimport Links from './Links/Links'\nimport Steraming from './YouTube/YouTube'\nimport './App.css';\n\nfunction App(props) {\n  return (\n    <div>\n      <div id = 'Steraming'>\n        <Steraming id = {props.List}/>\n      </div>\n      <div id = 'Links'>\n        <Links />\n      </div>\n    </div>\n  );\n}\n\nconst mapPlayList = state =>{\n  return{\n      List : state.list\n  }\n}\n\nexport default connect(mapPlayList)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport Reducer from './Store/reducer';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(Reducer);\n\nReactDOM.render(<Provider store = {store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}